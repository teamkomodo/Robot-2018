// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package commands.teleop;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import robotMain.Robot;
import robotMain.RobotMap;
import subsystems.DriveSystem;
import subsystems.DriveType;

/**
 *
 */
public class TeleopDriveCommand extends Command {
	private DriveSystem driveSystem;
	private DifferentialDrive robotDrive;
	private Joystick leftJoystick;
	private Joystick rightJoystick;
	double leftXValue;
	double leftYValue;
	double rightXValue;
	double rightYValue;
	
    public TeleopDriveCommand() {
        requires(Robot.driveSystem);
        
        driveSystem = Robot.driveSystem;
        robotDrive = driveSystem.getDrive();
        
        leftJoystick = Robot.oi.getLeftJoystick();
        rightJoystick = Robot.oi.getRightJoystick();
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	leftXValue = leftJoystick.getX();
    	rightXValue = rightJoystick.getX();
    	leftYValue = leftJoystick.getY();
    	rightYValue = rightJoystick.getY();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	

    	double currentLX = calculateAdjustedJoystickPosition(leftJoystick.getX(), leftXValue) * Robot.getAmpAdjust();
    	double currentRX = calculateAdjustedJoystickPosition(rightJoystick.getX(), rightXValue) * Robot.getAmpAdjust();
    	double currentLY = calculateAdjustedJoystickPosition( leftJoystick.getY(), leftYValue) * Robot.getAmpAdjust();
    	double currentRY = calculateAdjustedJoystickPosition(rightJoystick.getY(), rightYValue) * Robot.getAmpAdjust();
    	
//    	System.out.println("Drive type = "+driveSystem.getDriveType());

    	switch (driveSystem.getDriveType()) {
    	case TANK:
    		if (RobotMap.isReverseDrive) {
    			//for defense, etc. treats the robot as if the intake was in the back
    			robotDrive.tankDrive(rightYValue, leftYValue);
    			//System.out.println("TANK  "+rightYValue+"/"+leftYValue+"  REVERSE");
    		} else {
    			//normal control
    			robotDrive.tankDrive(-leftYValue, -rightYValue);
    			//System.out.println("TANK  "+(-leftYValue)+"/"+(-rightYValue));
    		}
    		break;
    	case ARCADE_1:
    		if (RobotMap.isReverseDrive) {
    			robotDrive.arcadeDrive(rightYValue, -rightXValue);
    			//System.out.println("ARCADE 1  "+leftYValue+"/"+leftXValue+"  REVERSE");
    		} else {
    			robotDrive.arcadeDrive(-rightYValue, rightXValue);
    			//System.out.println("ARCADE 1  "+(-leftYValue)+"/"+(-leftXValue));
    		}
    		break;
//    	case ARCADE_2:
//    		if (RobotMap.isReverseDrive) {
//    			robotDrive.arcadeDrive(leftYValue, rightXValue);
//    			//System.out.println("ARCADE 2  "+leftYValue+"/"+rightXValue+"  REVERSE");
//    		} else {
//    			robotDrive.arcadeDrive(-leftYValue, -rightXValue);
//    			//System.out.println("ARCADE 2  "+(-leftYValue)+"/"+(-rightXValue));
//    		}
//    		break;
    	case ARCADE_2:
    		if (RobotMap.isReverseDrive) {
    			robotDrive.arcadeDrive(rightYValue, leftXValue);
    			//System.out.println("ARCADE 2  "+rightYValue+"/"+leftXValue+"  REVERSE");
    		} else {
    			robotDrive.arcadeDrive(-rightYValue, -leftXValue);
    			//System.out.println("ARCADE 2  "+(-rightYValue)+"/"+(-leftXValue));
    		}
    		break;
    	default:
    		if (RobotMap.isReverseDrive) {
    			robotDrive.tankDrive(rightYValue, leftYValue);
    			//System.out.println("TANK  "+rightYValue+"/"+leftYValue+"  REVERSE");
    		} else {
    			robotDrive.tankDrive(-leftYValue, -rightYValue);
    			//System.out.println("TANK  "+(-leftYValue)+"/"+(-rightYValue));
    		}
    		break;
    	}
    	leftXValue = currentLX;
        rightXValue = currentRX;
        leftYValue = currentLY;
        rightYValue = currentRY;
    }
    
	private double calculateAdjustedJoystickPosition(double currentPosition,
													 double previousPosition) {
		int function = -1;
		double precision = 0.01;
		double percentStep = RobotMap.ROUND_INCREMENT;
		double slowStartStop = 0.3;
		double slowPercentStep = 0.02;
		double adjusted = currentPosition;
		
		if(function == 0) {
			if(Math.abs(currentPosition-previousPosition) > precision) {
				adjusted = (currentPosition + previousPosition) / 2;
			}
		}else if(function == 1) {
			if(Math.abs(currentPosition - previousPosition) > percentStep) {
				if(currentPosition > previousPosition) {
					if(currentPosition-previousPosition<RobotMap.ROUND_INCREMENT) {
						adjusted = currentPosition;
					}else {
						adjusted += percentStep;
					}
				}else {
					if(currentPosition-previousPosition<RobotMap.ROUND_INCREMENT) {
						adjusted = currentPosition;
					}else {
						adjusted += percentStep;
					}
				}
			}
		}else if (function == 2) {
			 if(Math.abs(previousPosition) <= slowStartStop && Math.abs(currentPosition) > previousPosition) {
				 if(Math.abs(currentPosition - previousPosition) > slowPercentStep) {
						if(currentPosition > previousPosition) {
							adjusted += slowPercentStep;
						}else {
							adjusted -= slowPercentStep;
						}
				 }
			 }else if (Math.abs(previousPosition) >= (1- slowStartStop) && Math.abs(currentPosition) < previousPosition) {
				 if(Math.abs(currentPosition - previousPosition) > slowPercentStep) {
						if(currentPosition > previousPosition) {
							adjusted += slowPercentStep;
						}else {
							adjusted -= slowPercentStep;
						}
				 }
			 }
		}
		
		return adjusted;
	}


    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
