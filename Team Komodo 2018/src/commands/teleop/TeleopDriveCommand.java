// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package commands.teleop;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import robotMain.Robot;
import robotMain.RobotMap;
import subsystems.DriveSystem;
import subsystems.DriveType;

/**
 *
 */
public class TeleopDriveCommand extends Command {
	private DriveSystem driveSystem;
	private DifferentialDrive robotDrive;
	private Joystick leftJoystick;
	private Joystick rightJoystick;
	
    public TeleopDriveCommand() {
        requires(Robot.driveSystem);
        
        driveSystem = Robot.driveSystem;
        robotDrive = driveSystem.getDrive();
        
        leftJoystick = Robot.oi.getLeftJoystick();
        rightJoystick = Robot.oi.getRightJoystick();
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	double leftXValue = leftJoystick.getX();
    	double rightXValue = rightJoystick.getX();
    	double leftYValue = leftJoystick.getY();
    	double rightYValue = rightJoystick.getY();

    	switch (driveSystem.getDriveType()) {
    	case TANK:
    		if (RobotMap.isReverseDrive) {
    			//for defense, etc. treats the robot as if the intake was in the back
    			robotDrive.tankDrive(rightYValue, leftYValue);
    		} else {
    			//normal control
    			robotDrive.tankDrive(-leftYValue, -rightYValue);
    		}
    	case ARCADE_1:
    		if (RobotMap.isReverseDrive) {
    			robotDrive.arcadeDrive(leftYValue, leftXValue);
    		} else {
    			robotDrive.arcadeDrive(-leftYValue, -leftXValue);
    		}
    	case ARCADE_2:
    		if (RobotMap.isReverseDrive) {
    			robotDrive.arcadeDrive(leftYValue, rightXValue);
    		} else {
    			robotDrive.arcadeDrive(-leftYValue, -rightXValue);
    		}
    	default:
    		if (RobotMap.isReverseDrive) {
    			robotDrive.tankDrive(rightYValue, leftYValue);
    		} else {
    			robotDrive.tankDrive(-leftYValue, -rightYValue);
    		}
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
