// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package commands.teleop;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PWMSpeedController;
import edu.wpi.first.wpilibj.command.Command;
import robotMain.Robot;
import robotMain.RobotMap;

/**
 *
 */
public class TeleopLiftCommand extends Command {
	private Joystick gamepadL;
	
	private PWMSpeedController lifterController;
	double previousLiftSpeed;
	
    public TeleopLiftCommand() {
        requires(Robot.lifterSystem);
 
        lifterController = Robot.lifterSystem.getLifterController();
        gamepadL = Robot.oi.getGamepadL();
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	previousLiftSpeed = gamepadL.getX();
    	
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	double currentLift = adjust(gamepadL.getY(), previousLiftSpeed) * Robot.getAmpAdjust();
    	int channel1 = 14;
    	int channel2 = 15;
    	//double liftTotalCurrent = Robot.pdp.getCurrent(channel1) + Robot.pdp.getCurrent(channel1);
    	// TODO: limit lifter motors so we don't burn them up
    	lifterController.set(currentLift);
    	previousLiftSpeed = currentLift;
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
    
    private double adjust(double currentPosition,
			 double previousPosition) {
		double percentStep = RobotMap.ROUND_INCREMENT;
		double adjusted = currentPosition;

			if(Math.abs(previousPosition - currentPosition) > percentStep) {
				if(currentPosition > previousPosition) {
					adjusted += percentStep;
				}else {
					adjusted -= percentStep;
				}
			}
//			System.out.println("Lift adjust: " + adjusted);
			return currentPosition;//adjusted;
    }
}
