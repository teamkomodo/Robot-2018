// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package subsystems;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import robotMain.RobotMap;
import commands.auto.AutonomousCommand;
import commands.teleop.*;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;


/**
 *
 */
public class DriveSystem extends Subsystem {
    private SpeedController leftSpark1;
    private SpeedControllerGroup leftSparks;
    private Encoder leftEncoder;
    
    private SpeedController rightSpark1;
    private SpeedControllerGroup rightSparks;
    private Encoder rightEncoder;
    
    private DifferentialDrive robotDrive;
    
    private DriveType driveType;
    
    private AutoController autoController;
    
    public DriveSystem() {
    	leftSpark1 = new Spark(RobotMap.leftSpark1Port);
    	leftSpark1.setInverted(false);
    	((Sendable)leftSpark1).setName("DriveSystem", "Left Talon 1");
    	leftSparks = new SpeedControllerGroup(leftSpark1);
    	leftEncoder = new Encoder(RobotMap.leftEncoderChannelA, RobotMap.leftEncoderChannelB);
        
        rightSpark1 = new Spark(RobotMap.rightSpark1Port);
        rightSpark1.setInverted(false);
    	((Sendable)rightSpark1).setName("DriveSystem", "Right Talon 1");
    	rightSparks = new SpeedControllerGroup(rightSpark1);
    	rightEncoder = new Encoder(RobotMap.rightEncoderChannelA, RobotMap.rightEncoderChannelB);
        
        robotDrive = new DifferentialDrive(leftSparks, rightSparks);
        
        robotDrive.setSafetyEnabled(false);
        robotDrive.setExpiration(0.1);
        robotDrive.setMaxOutput(1.0);
        
        driveType = DriveType.TANK;
        
        autoController = new AutoController(this);
    }

    @Override
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        //setDefaultCommand(new AutonomousCommand());
        setDefaultCommand(new TeleopDriveCommand());
    }
  
    @Override
    public void periodic() {
    	autoController.update();
    }
    
    public void temptank(double a, double b) {
    	leftSparks.set(-a);
    	rightSparks.set(-b);
    }
    
    public DifferentialDrive getDrive() {
    	return robotDrive;
    }
    
    public DriveType getDriveType() {
    	return driveType;
    }
    
    public void setDriveType(DriveType newType) {
    	driveType = newType;
    }
    
    public AutoController getAutoController() {
    	return autoController;
    }
    
    public int getLeftEncoderRaw() {
    	return leftEncoder.getRaw();
    }
    
    public int getRightEncoderRaw() {
    	return rightEncoder.getRaw();
    }
    
}

